var documenterSearchIndex = {"docs":
[{"location":"#RasterDataSources.jl","page":"RasterDataSources.jl","title":"RasterDataSources.jl","text":"","category":"section"},{"location":"","page":"RasterDataSources.jl","title":"RasterDataSources.jl","text":"Modules = [RasterDataSources]","category":"page"},{"location":"#RasterDataSources.RasterDataSources","page":"RasterDataSources.jl","title":"RasterDataSources.RasterDataSources","text":"RasterDataSources.jl\n\n(Image: ) (Image: ) (Image: CI) (Image: codecov.io)\n\nRasterDataSources downloads raster data for local use or for integration into other spatial data packages, like GeoData.jl.\n\nThe collection is largely focussed on datasets relevant to ecology, but will have a lot of crossover with other sciences.\n\nUsage is generally via the getraster method - which will download the raster data source if it isn't available locally, or simply return the path/s of the raster file/s.\n\njulia> using RasterDataSources\n\njulia> getraster(WorldClim{Climate}, :wind)\n12-element Array{String,1}:\n \"/home/user/Data/WorldClim/Climate/wind/wc2.1_10m_wind_01.tif\"\n \"/home/user/Data/WorldClim/Climate/wind/wc2.1_10m_wind_02.tif\"\n \"/home/user/Data/WorldClim/Climate/wind/wc2.1_10m_wind_03.tif\"\n \"/home/user/Data/WorldClim/Climate/wind/wc2.1_10m_wind_04.tif\"\n \"/home/user/Data/WorldClim/Climate/wind/wc2.1_10m_wind_05.tif\"\n \"/home/user/Data/WorldClim/Climate/wind/wc2.1_10m_wind_06.tif\"\n \"/home/user/Data/WorldClim/Climate/wind/wc2.1_10m_wind_07.tif\"\n \"/home/user/Data/WorldClim/Climate/wind/wc2.1_10m_wind_08.tif\"\n \"/home/user/Data/WorldClim/Climate/wind/wc2.1_10m_wind_09.tif\"\n \"/home/user/Data/WorldClim/Climate/wind/wc2.1_10m_wind_10.tif\"\n \"/home/user/Data/WorldClim/Climate/wind/wc2.1_10m_wind_11.tif\"\n \"/home/user/Data/WorldClim/Climate/wind/wc2.1_10m_wind_12.tif\"\n\nTo download data you will need to specify a folder to put it in. You can do this by assigning the environment variable RASTERDATASOURCES_PATH:\n\nENV[\"RASTERDATASOURCES_PATH\"] = \"/home/user/Data/\"\n\nThis can be put in your startup.jl file or the system environment.\n\nPull requests are with additional data sources are welcomed, but should as much as possible follow the structure used for existing data sources.\n\nRasterDataSources was based on code from the SimpleSDMDataSoures.jl package by Timoth√©e Poisot.\n\n\n\n\n\n","category":"module"},{"location":"#RasterDataSources.ALWB","page":"RasterDataSources.jl","title":"RasterDataSources.ALWB","text":"ALWB{Union{Deciles,Values},Union{Day,Month,Year}} <: RasterDataSource\n\nData from the Australian Landscape Water Balance (ALWB) data set.\n\nSee: www.bom.gov.au/water/landscape\n\nLayers are available in daily, monthly and  annual resolutions, and as Values or relative Deciles.\n\nThe available layers are: (:rain_day, :s0_pct, :ss_pct, :sd_pct, :sm_pct, :qtot, :etot, :e0, :ma_wet, :pen_pet, :fao_pet, :asce_pet, :msl_wet, :dd).\n\n\n\n\n\n","category":"type"},{"location":"#RasterDataSources.AWAP","page":"RasterDataSources.jl","title":"RasterDataSources.AWAP","text":"AWAP <: RasterDataSource\n\nDaily weather data from the Australian Water Availability Project, developed by CSIRO.\n\nSee: www.csiro.au/awap\n\nThe available layers are: (:solar, :rainfall, :vprpress09, :vprpress15, :tmin, :tmax).\n\n\n\n\n\n","category":"type"},{"location":"#RasterDataSources.CHELSA","page":"RasterDataSources.jl","title":"RasterDataSources.CHELSA","text":"CHELSA{BioClim} <: RasterDataSource\n\nData from CHELSA, currently only the BioClim layer is implemented.\n\nSee: chelsa-climate.org\n\n\n\n\n\n","category":"type"},{"location":"#RasterDataSources.Deciles","page":"RasterDataSources.jl","title":"RasterDataSources.Deciles","text":"Deciles <: DataMode\n\nGet the dataset in relative deciles.\n\n\n\n\n\n","category":"type"},{"location":"#RasterDataSources.EarthEnv","page":"RasterDataSources.jl","title":"RasterDataSources.EarthEnv","text":"EarthEnv{Union{HabitatHeterogeneity,LandCover}} <: RasterDataSource\n\nData from the EarthEnv including HabitatHeterogeneity and LandCover\n\nSee: www.earthenv.org\n\n\n\n\n\n","category":"type"},{"location":"#RasterDataSources.Values","page":"RasterDataSources.jl","title":"RasterDataSources.Values","text":"Values <: DataMode\n\nGet as the regular measured values.\n\n\n\n\n\n","category":"type"},{"location":"#RasterDataSources.WorldClim","page":"RasterDataSources.jl","title":"RasterDataSources.WorldClim","text":"WorldClim{Union{BioClim,Climate,Weather}} <: RasterDataSource\n\nData from WorldClim datasets, either BioClim, Climate or Weather\n\nSee: www.worldclim.org\n\n\n\n\n\n","category":"type"},{"location":"#RasterDataSources.geoarray","page":"RasterDataSources.jl","title":"RasterDataSources.geoarray","text":"geoarray(T::Type{<:RasterDataSource}, args...; kw...) => AbstractArray\n\nLoad a RasterDataSource as an AbstractGeoStack. T, args are are passed to getraster, while kw args are for both getraster and AbstractGeoStack.\n\n\n\n\n\n","category":"function"},{"location":"#RasterDataSources.getraster-Tuple{Type{AWAP},Symbol}","page":"RasterDataSources.jl","title":"RasterDataSources.getraster","text":"getraster(T::Type{AWAP}, layer::Symbol; date) => String\ngetraster(T::Type{AWAP}, layer::Symbol, date) => String\n\nDownload data from the AWAP weather dataset, for layer in (:solar, :rainfall, :vprpress09, :vprpress15, :tmin, :tmax), and date as a DateTime or iterable of DateTime.\n\nAWAP is available on a daily timestep. If no layer is specified,  all layers will be downloaded, and a Tuple of Vector{String} will be returned.\n\nExample\n\nRainfall for the first month of 2001:\n\ngetraster(AWAP, :rainfall; date=Date(2001, 1, 1):Day(1):Date(2001, 1, 31))\n\n\n\n\n\n","category":"method"},{"location":"#RasterDataSources.getraster-Tuple{Type{CHELSA{BioClim}},Integer}","page":"RasterDataSources.jl","title":"RasterDataSources.getraster","text":"getraster(T::Type{CHELSA{BioClim}}, [layer::Integer]) => String\n\nDownload CHELSA BioClim data, choosing layers from: 1:19.\n\nWithout a layer argument, all layers will be downloaded, and a tuple of paths is returned.  If the data is already downloaded the path will be returned.\n\n\n\n\n\n","category":"method"},{"location":"#RasterDataSources.getraster-Tuple{Type{EarthEnv{HabitatHeterogeneity}},Symbol}","page":"RasterDataSources.jl","title":"RasterDataSources.getraster","text":"getraster(T::Type{EarthEnv{HabitatHeterogeneity}}, [layer::Union{Tuple,Integer}]; res::Int=25) => String\ngetraster(T::Type{EarthEnv{HabitatHeterogeneity}}, layer::Integer, res::Int=25) => String\n\nDownload EarthEnv habitat heterogeneity data, choosing layer from:  (:cv, :evenness, :range, :shannon, :simpson, :std, :Contrast, :Correlation, :Dissimilarity, :Entropy, :Homogeneity, :Maximum, :Uniformity, :Variance) and res from  (\"1km\", \"5km\", \"25km\").\n\nWithout a layer argument, all layers will be downloaded and a tuple of paths returned.  If the data is already downloaded the path will be returned without the getraster.\n\n\n\n\n\n","category":"method"},{"location":"#RasterDataSources.getraster-Tuple{Type{EarthEnv{LandCover}},Integer}","page":"RasterDataSources.jl","title":"RasterDataSources.getraster","text":"getraster(T::Type{EarthEnv{LandCover}}, [layer::Union{AbstractArray,Tuple,Integer}]; discover::Bool=false) => String\ngetraster(T::Type{EarthEnv{LandCover}}, layer::Integer, discover::Bool) => String\n\nDownload EarthEnv landcover data, choosing layer from: 1:12.\n\nWithout a layer argument, all layers will be downloaded and a tuple of paths returned.  If the data is already downloaded the path will be returned.\n\n\n\n\n\n","category":"method"},{"location":"#RasterDataSources.getraster-Tuple{Type{WorldClim{BioClim}},Integer}","page":"RasterDataSources.jl","title":"RasterDataSources.getraster","text":"getraster(T::Type{WorldClim{BioClim}}, [layer::Integer]; res::String=\"10m\") => String\ngetraster(T::Type{WorldClim{BioClim}}, layer::Integer, res::String)\n\nDownload WorldClim weather data, choosing layer from 1:19, and res from (\"30s\", \"2.5m\", \"5m\", \"10m\").\n\nWithout a layer argument, all layers will be downloaded, and a tuple of paths is returned.  If the data is already downloaded the path will be returned.\n\n\n\n\n\n","category":"method"},{"location":"#RasterDataSources.getraster-Tuple{Type{WorldClim{Climate}},Any}","page":"RasterDataSources.jl","title":"RasterDataSources.getraster","text":"getraster(T::Type{WorldClim{Climate}}, [layer::Union{Symbol,Tuple}]; month=1:12, res::String=\"10m\") => Vector{String}\ngetraster(T::Type{WorldClim{Climate}}, layer::Symbol, month::Integer, res::String)\n\nDownload WorldClim weather data, choosing layer from (:tmin, :tmax, :tavg, :prec, :srad, :wind, :vapr), and res from (\"30s\", \"2.5m\", \"5m\", \"10m\"), and months from 1:12.\n\nWithout a layer argument, all layers will be downloaded, and a tuple of paths is returned.  By default all months are downloaded , but can also be downloaded individually. If the data is already downloaded the path will be returned.\n\n\n\n\n\n","category":"method"},{"location":"#RasterDataSources.getraster-Tuple{Type{WorldClim{Weather}},Symbol}","page":"RasterDataSources.jl","title":"RasterDataSources.getraster","text":"getraster(T::Type{WorldClim{Weather}}, [layer::Union{Symbol,Tuple}]; date) => Vector{String}\ngetraster(T::Type{WorldClim{Weather}}, layer::Symbol, date)\n\nDownload WorldClim weather data, choosing layer from: (:tmin, :tmax, :prec).\n\nWithout a layer argument, all layers will be downloaded, and a tuple of paths is returned.  If the data is already downloaded the path will be returned.\n\n\n\n\n\n","category":"method"},{"location":"#RasterDataSources.getraster-Tuple{Type{var\"#s21\"} where var\"#s21\"<:ALWB,Symbol}","page":"RasterDataSources.jl","title":"RasterDataSources.getraster","text":"getraster(T::Type{<:ALWB{Union{Deciles,Values},Union{Day,Month,Year}}}, layer; date)\ngetraster(T::Type{<:ALWB{Union{Deciles,Values},Union{Day,Month,Year}}}, layer, date)\n\nDownload ALWB weather data, choosing layers from: (:rain_day, :s0_pct, :ss_pct, :sd_pct, :sm_pct, :qtot, :etot, :e0, :ma_wet, :pen_pet, :fao_pet, :asce_pet, :msl_wet, :dd).\n\nWithout a layer argument, all layers will be downloaded, and a tuple of path vectors returned.  If the data is already downloaded the path will be returned.\n\n\n\n\n\n","category":"method"},{"location":"#RasterDataSources.series","page":"RasterDataSources.jl","title":"RasterDataSources.series","text":"series(T::Type{<:RasterDataSource}, [layers::Union{Symbol,AbstractArray,Tuple}]; kw...) => AbstractGeoSeries\n\nLoad a RasterDataSource as an AbstractGeoSeries. T, args are are passed to getraster, while kw args are for both getraster and AbstractGeoSeries.\n\n\n\n\n\n","category":"function"},{"location":"#RasterDataSources.stack","page":"RasterDataSources.jl","title":"RasterDataSources.stack","text":"stack(T::Type{<:RasterDataSource}, [layers::Union{Symbol,AbstractArray,Tuple}]; kw...) => AbstractGeoStack\n\nLoad a RasterDataSource as an AbstractGeoStack. T, args are are passed to getraster, while kw args are for both getraster and AbstractGeoStack.\n\n\n\n\n\n","category":"function"}]
}
