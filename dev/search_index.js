var documenterSearchIndex = {"docs":
[{"location":"#RasterDataSources.jl","page":"RasterDataSources.jl","title":"RasterDataSources.jl","text":"","category":"section"},{"location":"","page":"RasterDataSources.jl","title":"RasterDataSources.jl","text":"RasterDataSources","category":"page"},{"location":"#RasterDataSources","page":"RasterDataSources.jl","title":"RasterDataSources","text":"RasterDataSources.jl\n\n(Image: ) (Image: ) (Image: CI) (Image: codecov.io)\n\nRasterDataSources downloads raster data for local use or for integration into other spatial data packages, like GeoData.jl. The collection is largely focussed on datasets relevant to ecology, but will have a lot of crossover with other sciences.\n\nCurrently sources include :\n\nSource URL Status\nCHELSA https://chelsa-climate.org BioClim, Future BioClim and Climate\nWorldClim https://www.worldclim.org Climate, Weather and BioClim\nEarthEnv http://www.earthenv.org LandCover and HabitatHeterogeneity\nAWAP http://www.bom.gov.au/jsp/awap/index.jsp Complete\nALWB http://www.bom.gov.au/water/landscape/ Complete\n\nPlease open an issue if you need more datasets added, or (even better) open a pull request  following the form of the other datasets where possible.\n\nRetrieving data\n\nUsage is generally via the getraster method - which will download the raster data source if it isn't available locally, or simply return the path/s of the raster file/s:\n\njulia> using RasterDataSources\n\njulia> getraster(WorldClim{Climate}, :wind; month=1:12)\n12-element Array{String,1}:\n \"/home/user/Data/WorldClim/Climate/wind/wc2.1_10m_wind_01.tif\"\n \"/home/user/Data/WorldClim/Climate/wind/wc2.1_10m_wind_02.tif\"\n \"/home/user/Data/WorldClim/Climate/wind/wc2.1_10m_wind_03.tif\"\n \"/home/user/Data/WorldClim/Climate/wind/wc2.1_10m_wind_04.tif\"\n \"/home/user/Data/WorldClim/Climate/wind/wc2.1_10m_wind_05.tif\"\n \"/home/user/Data/WorldClim/Climate/wind/wc2.1_10m_wind_06.tif\"\n \"/home/user/Data/WorldClim/Climate/wind/wc2.1_10m_wind_07.tif\"\n \"/home/user/Data/WorldClim/Climate/wind/wc2.1_10m_wind_08.tif\"\n \"/home/user/Data/WorldClim/Climate/wind/wc2.1_10m_wind_09.tif\"\n \"/home/user/Data/WorldClim/Climate/wind/wc2.1_10m_wind_10.tif\"\n \"/home/user/Data/WorldClim/Climate/wind/wc2.1_10m_wind_11.tif\"\n \"/home/user/Data/WorldClim/Climate/wind/wc2.1_10m_wind_12.tif\"\n\nInstallation and setup\n\nInstall as usual with:\n\n] add RasterDataSources\n\nTo download data you will need to specify a folder to put it in. You can do this by assigning the environment variable RASTERDATASOURCES_PATH:\n\nENV[\"RASTERDATASOURCES_PATH\"] = \"/home/user/Data/\"\n\nThis can be put in your startup.jl file or the system environment.\n\nRasterDataSources was based on code from the SimpleSDMDataSoures.jl package by Timoth√©e Poisot.\n\n\n\n\n\n","category":"module"},{"location":"#getraster","page":"RasterDataSources.jl","title":"getraster","text":"","category":"section"},{"location":"","page":"RasterDataSources.jl","title":"RasterDataSources.jl","text":"RasterDataSources.jl only exports a single function, getraster.","category":"page"},{"location":"","page":"RasterDataSources.jl","title":"RasterDataSources.jl","text":"Modules = [RasterDataSources]\nPrivate = false\nOrder = [:function]","category":"page"},{"location":"#RasterDataSources.getraster","page":"RasterDataSources.jl","title":"RasterDataSources.getraster","text":"getraster(T::Type, layers::Union{Tuple,Int,Symbol}; kw...)\n\nDownload raster layers layers from the data source T, returning a String for a single layer, or a NamedTuple for a Tuple of layers. layer values are usually values of Symbol, but can also be Int for BioClim datasets.\n\nKeyword arguments depend on the specific data source.  The may modify the return value, following a pattern:\n\nmonth keywords of AbstractArray will return aVector{String}orVector{<:NamedTuple}`.\ndate keywords of AbstractArray will return a Vector{String} or   Vector{<:NamedTuple}.\ndate keywords of Tuple{start,end} will take all the dates between the    start and end dates, and also return Vector{String} or Vector{<:NamedTuple}.\n\nWhere date and month keywords coexist, Vector{Vector{String}} of Vector{Vector{NamedTuple}} is the result. date ranges are always the outer Vector, month the inner Vector with layer tuples as the inner NamedTuple. No other keywords can be Vector.\n\nThis schema may be added to in future for datasets with additional axes, but should not change for the existing RasterDataSource types.\n\n\n\n\n\n","category":"function"},{"location":"#RasterDataSources.getraster-2","page":"RasterDataSources.jl","title":"RasterDataSources.getraster","text":"getraster(T::Type{WorldClim{BioClim}}, [layer::Union{Tuple,AbstractVector,Integer}]; res::String=\"10m\") => Union{Tuple,AbstractVector,String}\n\nDownload WorldClim BioClim data.\n\nArguments\n\nlayer: Integer or tuple/range of Integer from (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19).    Without a layer argument, all layers will be downloaded, and a NamedTuple of paths returned.\n\nKeywords\n\nres: String chosen from (\"30s\", \"2.5m\", \"5m\", \"10m\"), \"10m\" by default.\n\nReturns the filepath/s of the downloaded or pre-existing files.\n\n\n\n\n\n","category":"function"},{"location":"#RasterDataSources.getraster-Tuple{Type{AWAP}, Union{Symbol, Tuple}}","page":"RasterDataSources.jl","title":"RasterDataSources.getraster","text":"getraster(source::Type{AWAP}, [layer::Union{Tuple,Symbol}]; date::Union{DateTime,Tuple,AbstractVector})\n\nDownload data from the AWAP weather dataset, from www.csiro.au/awap. \n\nThe AWAP dataset contains ASCII .grid files.\n\nArguments\n\nlayer Symbol or Tuple of Symbol for layers in (:solar, :rainfall, :vprpress09, :vprpress15, :tmin, :tmax). Without a    layer argument, all layers will be downloaded, and a NamedTuple of paths returned.\n\nKeywords\n\ndate: a DateTime, AbstractVector of DateTime or a Tuple of start and end dates.   For multiple dates, A Vector of multiple filenames will be returned.   AWAP is available with a daily timestep.\n\nExample\n\nDownload rainfall for the first month of 2001:\n\njulia> getraster(AWAP, :rainfall; date=Date(2001, 1, 1):Day(1):Date(2001, 1, 31))\n\n31-element Vector{String}:\n \"/your/path/AWAP/rainfall/totals/20010101.grid\"\n \"/your/path/AWAP/rainfall/totals/20010102.grid\"\n ...\n \"/your/path/AWAP/rainfall/totals/20010131.grid\"\n\nReturns the filepath/s of the downloaded or pre-existing files.\n\n\n\n\n\n","category":"method"},{"location":"#RasterDataSources.getraster-Tuple{Type{CHELSA{BioClim}}, Tuple}","page":"RasterDataSources.jl","title":"RasterDataSources.getraster","text":"getraster(source::Type{CHELSA{BioClim}}, [layer::Union{Tuple,Integer}]) => Union{Tuple,String}\n\nDownload CHELSA BioClim data from chelsa-climate.org.\n\nArguments\n\nlayer: Integer or tuple/range of Integer from (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19).    Without a layer argument, all layers will be downloaded, and a NamedTuple of paths returned.\n\nReturns the filepath/s of the downloaded or pre-existing files.\n\n\n\n\n\n","category":"method"},{"location":"#RasterDataSources.getraster-Tuple{Type{EarthEnv{HabitatHeterogeneity}}, Union{Symbol, Tuple}}","page":"RasterDataSources.jl","title":"RasterDataSources.getraster","text":"getraster(source::Type{EarthEnv{HabitatHeterogeneity}}, [layer]; res=\"25km\")\n\nDownload EarthEnv habitat heterogeneity data.\n\nArguments\n\nlayer: Symbol or Tuple of Symbol from (:cv, :evenness, :range, :shannon, :simpson, :std, :Contrast, :Correlation, :Dissimilarity, :Entropy, :Homogeneity, :Maximum, :Uniformity, :Variance).   Without a layer argument, all layers will be downloaded, and a NamedTuple of paths returned.\n\nKeywords\n\nres: String chosen from (\"1km\", \"5km\", \"25km\"), defaulting to \"25km\".\n\nReturns the filepath/s of the downloaded or pre-existing files.\n\n\n\n\n\n","category":"method"},{"location":"#RasterDataSources.getraster-Tuple{Type{WorldClim{Climate}}, Union{Symbol, Tuple}}","page":"RasterDataSources.jl","title":"RasterDataSources.getraster","text":"getraster(T::Type{WorldClim{Climate}}, [layer::Union{Tuple,Symbol}]; month, res::String=\"10m\") => Vector{String}\n\nDownload WorldClim Climate data. \n\nArguments\n\nlayer Symbol or Tuple of Symbol from (:tmin, :tmax, :tavg, :prec, :srad, :wind, :vapr).    Without a layer argument, all layers will be downloaded, and a NamedTuple of paths returned.\n\nKeywords\n\nmonth: Integer or AbstractArray of Integer. By default all months are downloaded,   but can be chosen from 1:12.\nres: String chosen from (\"30s\", \"2.5m\", \"5m\", \"10m\"), \"10m\" by default.\n\nReturns the filepath/s of the downloaded or pre-existing files.\n\n\n\n\n\n","category":"method"},{"location":"#RasterDataSources.getraster-Tuple{Type{WorldClim{Weather}}, Union{Symbol, Tuple}}","page":"RasterDataSources.jl","title":"RasterDataSources.getraster","text":"getraster(T::Type{WorldClim{Weather}}, [layer::Union{Tuple,Symbol}]; date) => Union{String,Tuple{String},Vector{String}}\n\nDownload WorldClim Weather data, for layer/s in: (:tmin, :tmax, :prec). Without a layer argument, all layers will be downloaded, and a NamedTuple of paths returned. \n\nKeywords\n\ndate: a Date or DateTime object, a Vector of dates, or Tuple of start/end dates.   WorldClim Weather is available with a daily timestep. \n\nReturns the filepath/s of the downloaded or pre-existing files.\n\n\n\n\n\n","category":"method"},{"location":"#RasterDataSources.getraster-Tuple{Type{var\"#s69\"} where var\"#s69\"<:(CHELSA{var\"#s68\"} where var\"#s68\"<:(Future{Climate, C, M, S} where {C<:RasterDataSources.CMIPphase, M<:RasterDataSources.ClimateModel, S<:Union{RasterDataSources.RepresentativeConcentrationPathway, RasterDataSources.SharedSocioeconomicPathway}})), Union{Symbol, Tuple}}","page":"RasterDataSources.jl","title":"RasterDataSources.getraster","text":"getraster(T::Type{CHELSA{Future{Climate}}}, [layer::Integer]; date, month) => String\n\nDownload CHELSA BioClim data, choosing layers from: (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19).\n\nWithout a layer argument, all layers will be downloaded, and a NamedTuple of paths returned.\n\nKeywords\n\ndate: a Date or DateTime object, a Vector, or Tuple of start/end dates.   Note that CHELSA CMIP5 only has two datasets, for the periods 2041-2060 and   2061-2080. Dates must fall within these ranges.\nmonth: the month of the year, from 1 to 12, or a array or range of months like 1:12.\n\n\n\n\n\n","category":"method"},{"location":"#RasterDataSources.getraster-Tuple{Type{var\"#s76\"} where var\"#s76\"<:ALWB, Union{Symbol, Tuple}}","page":"RasterDataSources.jl","title":"RasterDataSources.getraster","text":"getraster(source::Type{<:ALWB{Union{Deciles,Values},Union{Day,Month,Year}}}, [layer]; date)\n\nDownload ALWB weather data from  www.bom.gov.au/water/landscape as values or  deciles with timesteps of Day, Month or Year.\n\nArguments\n\nlayer: Symbol or Tuple of Symbol from (:rain_day, :s0_pct, :ss_pct, :sd_pct, :sm_pct, :qtot, :etot, :e0, :ma_wet, :pen_pet, :fao_pet, :asce_pet, :msl_wet, :dd). Without a    layer argument, all layers will be downloaded, and a NamedTuple of paths returned.\n\nKeywords\n\ndate: a DateTime, AbstractVector of DateTime or a Tuple of start and end dates.   For multiple dates, a Vector of multiple filenames will be returned.   ALWB is available with a daily, monthly, and yearly, timestep.\n\nExample\n\nThis will return the file containing annual averages, including your date:\n\njulia> getraster(ALWB{Values,Year}, :ss_pct; date=Date(2001, 2))\n\"/your/RASTERDATASOURCES_PATH/ALWB/values/month/ss_pct.nc\"\n\nReturns the filepath/s of the downloaded or pre-existing files.\n\n\n\n\n\n","category":"method"},{"location":"#RasterDataSources.getraster-Tuple{Type{var\"#s77\"} where var\"#s77\"<:(CHELSA{var\"#s78\"} where var\"#s78\"<:(Future{BioClim, C, M, S} where {C<:RasterDataSources.CMIPphase, M<:RasterDataSources.ClimateModel, S<:Union{RasterDataSources.RepresentativeConcentrationPathway, RasterDataSources.SharedSocioeconomicPathway}})), Union{Int64, Symbol, Tuple}}","page":"RasterDataSources.jl","title":"RasterDataSources.getraster","text":"getraster(T::Type{CHELSA{Future{BioClim}}}, [layer::Integer]; date) => String\n\nDownload CHELSA BioClim data, choosing layers from: (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19).\n\nWithout a layer argument, all layers will be downloaded, and a NamedTuple of paths  returned.\n\nKeywords\n\ndate: a Date or DateTime object, a Vector, or Tuple of start/end dates.   Note that CHELSA CMIP5 only has two datasets, for the periods 2041-2060 and   2061-2080. Dates must fall within these ranges.\n\n\n\n\n\n","category":"method"},{"location":"#RasterDataSources.getraster-Tuple{Type{var\"#s78\"} where var\"#s78\"<:(EarthEnv{var\"#s77\"} where var\"#s77\"<:LandCover), Union{Int64, Tuple}}","page":"RasterDataSources.jl","title":"RasterDataSources.getraster","text":"getraster(T::Type{EarthEnv{LandCover}}, [layer]; discover::Bool=false) => Union{Tuple,String}\n\nDownload EarthEnv landcover data.\n\nArguments\n\nlayer: Integer or tuple/range of Integer from (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12).   Without a layer argument, all layers will be downloaded, and a NamedTuple of paths returned.\n\nLandCover may also be `LandCover{:DISCover} to download the dataset that integrates the DISCover model.\n\nReturns the filepath/s of the downloaded or pre-existing files.\n\n\n\n\n\n","category":"method"},{"location":"#Data-sources","page":"RasterDataSources.jl","title":"Data sources","text":"","category":"section"},{"location":"","page":"RasterDataSources.jl","title":"RasterDataSources.jl","text":"RasterDataSources.RasterDataSource\nALWB\nAWAP\nCHELSA\nEarthEnv\nWorldClim","category":"page"},{"location":"#RasterDataSources.RasterDataSource","page":"RasterDataSources.jl","title":"RasterDataSources.RasterDataSource","text":"RasterDataSource\n\nAbstract supertype for raster data collections.  \n\n\n\n\n\n","category":"type"},{"location":"#RasterDataSources.ALWB","page":"RasterDataSources.jl","title":"RasterDataSources.ALWB","text":"ALWB{Union{Deciles,Values},Union{Day,Month,Year}} <: RasterDataSource\n\nData from the Australian Landscape Water Balance (ALWB) data source.\n\nSee: www.bom.gov.au/water/landscape\n\nThe dataset contains NetCDF files. They have a time dimension so that multiple dates are stored in each file. \n\nThe available layers are: (:rain_day, :s0_pct, :ss_pct, :sd_pct, :sm_pct, :qtot, :etot, :e0, :ma_wet, :pen_pet, :fao_pet, :asce_pet, :msl_wet, :dd), available in daily, monthly and  annual resolutions, and as Values or relative Deciles.\n\ngetraster for ALWB must use a date keyword to specify the date to download.\n\n\n\n\n\n","category":"type"},{"location":"#RasterDataSources.AWAP","page":"RasterDataSources.jl","title":"RasterDataSources.AWAP","text":"AWAP <: RasterDataSource\n\nDaily weather data from the Australian Water Availability Project, developed by CSIRO.\n\nSee: www.csiro.au/awap\n\nThe available layers are: (:solar, :rainfall, :vprpress09, :vprpress15, :tmin, :tmax).\n\n\n\n\n\n","category":"type"},{"location":"#RasterDataSources.CHELSA","page":"RasterDataSources.jl","title":"RasterDataSources.CHELSA","text":"CHELSA{BioClim} <: RasterDataSource\n\nData from CHELSA, currently implements thet current and future bioclim variables.\n\nSee: chelsa-climate.org\n\n\n\n\n\n","category":"type"},{"location":"#RasterDataSources.EarthEnv","page":"RasterDataSources.jl","title":"RasterDataSources.EarthEnv","text":"EarthEnv{Union{HabitatHeterogeneity,LandCover}} <: RasterDataSource\n\nData from the EarthEnv including HabitatHeterogeneity and LandCover\n\nSee: www.earthenv.org\n\n\n\n\n\n","category":"type"},{"location":"#RasterDataSources.WorldClim","page":"RasterDataSources.jl","title":"RasterDataSources.WorldClim","text":"WorldClim{Union{BioClim,Climate,Weather}} <: RasterDataSource\n\nData from WorldClim datasets, either BioClim, Climate or  Weather.\n\nSee: www.worldclim.org\n\n\n\n\n\n","category":"type"},{"location":"#Datasets","page":"RasterDataSources.jl","title":"Datasets","text":"","category":"section"},{"location":"","page":"RasterDataSources.jl","title":"RasterDataSources.jl","text":"RasterDataSources.RasterDataSet\nBioClim\nClimate\nWeather\nLandCover\nHabitatHeterogeneity","category":"page"},{"location":"#RasterDataSources.RasterDataSet","page":"RasterDataSources.jl","title":"RasterDataSources.RasterDataSet","text":"RasterDataSet\n\nAbstract supertye for datasets that belong to a RasterDataSource.\n\n\n\n\n\n","category":"type"},{"location":"#RasterDataSources.BioClim","page":"RasterDataSources.jl","title":"RasterDataSources.BioClim","text":"BioClim <: RasterDataSet\n\nBioClim datasets. Usually containing layers from 1:19. They do not usually use month or date keywords, but may use date in past/future scenarios. \n\n\n\n\n\n","category":"type"},{"location":"#RasterDataSources.Climate","page":"RasterDataSources.jl","title":"RasterDataSources.Climate","text":"Climate <: RasterDataSet\n\nClimate datasets. These are usually months of the year, not specific dates, and use a month keyword in getraster. They may also use date in past/future scenarios.\n\n\n\n\n\n","category":"type"},{"location":"#RasterDataSources.Weather","page":"RasterDataSources.jl","title":"RasterDataSources.Weather","text":"Weather <: RasterDataSet\n\nWeather datasets. These are usually large time-series of specific dates, and use a date keyword in getraster.\n\n\n\n\n\n","category":"type"},{"location":"#RasterDataSources.LandCover","page":"RasterDataSources.jl","title":"RasterDataSources.LandCover","text":"LandCover <: RasterDataSet\n\nLand-cover datasets.\n\n\n\n\n\n","category":"type"},{"location":"#RasterDataSources.HabitatHeterogeneity","page":"RasterDataSources.jl","title":"RasterDataSources.HabitatHeterogeneity","text":"HabitatHeterogeneity <: RasterDataSet\n\nHabitat heterogeneity datasets.\n\n\n\n\n\n","category":"type"},{"location":"#Other","page":"RasterDataSources.jl","title":"Other","text":"","category":"section"},{"location":"","page":"RasterDataSources.jl","title":"RasterDataSources.jl","text":"Values\nDeciles","category":"page"},{"location":"#Internal-interface","page":"RasterDataSources.jl","title":"Internal interface","text":"","category":"section"},{"location":"","page":"RasterDataSources.jl","title":"RasterDataSources.jl","text":"These methods are not exported at this stage, but are for the most part internally consistent. Any new sources added to the package should use these methods in a consistent way for readability, consistency and the potential to use them for other things later.","category":"page"},{"location":"","page":"RasterDataSources.jl","title":"RasterDataSources.jl","text":"Modules = [RasterDataSources]\nPublic = false\nOrder = [:function]","category":"page"},{"location":"#RasterDataSources.rastername","page":"RasterDataSources.jl","title":"RasterDataSources.rastername","text":"rastername(source::Type, [layer]; kw...)\n\nReturns the name of the file, without downloading it.\n\nArguments are the same as for getraster\n\nReturns a String or multiple Strings.\n\n\n\n\n\n","category":"function"},{"location":"#RasterDataSources.rasterpath","page":"RasterDataSources.jl","title":"RasterDataSources.rasterpath","text":"rasterpath(source::Type, [layer]; kw...)\n\nReturns the name of the file, without downloading it.\n\nArguments are the same as for getraster\n\nReturns a String or multiple Strings.\n\n\n\n\n\n","category":"function"},{"location":"#RasterDataSources.rasterurl","page":"RasterDataSources.jl","title":"RasterDataSources.rasterurl","text":"rasterurl(source::Type, [layer]; kw...)\n\nIf the file has a single url, returns it without downloading.\n\nArguments are the same as for getraster.\n\nReturns a URIs.jl URI or mulitiple URIs.\n\n\n\n\n\n","category":"function"},{"location":"#RasterDataSources.zipname","page":"RasterDataSources.jl","title":"RasterDataSources.zipname","text":"zipname(source::Type, [layer]; kw...)\n\nIf the url is a zipped file, returns its name.\n\nArguments are as the same for getraster where possible.\n\nReturns a String or multiple Strings.\n\n\n\n\n\n","category":"function"},{"location":"#RasterDataSources.zippath","page":"RasterDataSources.jl","title":"RasterDataSources.zippath","text":"zippath(source::Type, [layer]; kw...)\n\nIf the url is a zipped file, returns its path when downloaded. (This may not exist after extraction with getraster)\n\nArguments are the same as for getraster where possible.\n\nReturns a String or multiple Strings.\n\n\n\n\n\n","category":"function"},{"location":"#RasterDataSources.zipurl","page":"RasterDataSources.jl","title":"RasterDataSources.zipurl","text":"zipurl(source::Type, [layer]; kw...)\n\nIf the url is a zipped file, returns its zip path without downloading.\n\nArguments are the same as for getraster where possible.\n\nReturns a URIs.jl URI or mulitiple URIs.\n\n\n\n\n\n","category":"function"}]
}
