var documenterSearchIndex = {"docs":
[{"location":"#RasterDataSources.jl","page":"RasterDataSources.jl","title":"RasterDataSources.jl","text":"","category":"section"},{"location":"","page":"RasterDataSources.jl","title":"RasterDataSources.jl","text":"RasterDataSources","category":"page"},{"location":"#RasterDataSources","page":"RasterDataSources.jl","title":"RasterDataSources","text":"RasterDataSources.jl\n\n(Image: ) (Image: ) (Image: CI) (Image: codecov.io)\n\nRasterDataSources downloads raster data for local use or for integration into other spatial data packages, like Rasters.jl. The collection is largely focussed on datasets relevant to ecology, but will have a lot of crossover with other sciences.\n\nCurrently sources include:\n\nSource URL Status\nCHELSA https://chelsa-climate.org BioClim, BioClimPlus, and Climate\nWorldClim https://www.worldclim.org Climate, Weather, BioClim, and Elevation\nEarthEnv http://www.earthenv.org LandCover and HabitatHeterogeneity\nAWAP http://www.bom.gov.au/jsp/awap/index.jsp Complete\nALWB http://www.bom.gov.au/water/landscape/ Complete\nSRTM https://www2.jpl.nasa.gov/srtm/ Complete\nMODIS https://modis.ornl.gov Complete (beta)\n\nPlease open an issue if you need more datasets added, or (even better) open a pull request  following the form of the other datasets where possible.\n\nRetrieving data\n\nUsage is generally via the getraster method - which will download the raster data source if it isn't available locally, or simply return the path/s of the raster file/s:\n\njulia> using RasterDataSources\n\njulia> getraster(WorldClim{Climate}, :wind; month=1:12)\n12-element Array{String,1}:\n \"/home/user/Data/WorldClim/Climate/wind/wc2.1_10m_wind_01.tif\"\n \"/home/user/Data/WorldClim/Climate/wind/wc2.1_10m_wind_02.tif\"\n \"/home/user/Data/WorldClim/Climate/wind/wc2.1_10m_wind_03.tif\"\n \"/home/user/Data/WorldClim/Climate/wind/wc2.1_10m_wind_04.tif\"\n \"/home/user/Data/WorldClim/Climate/wind/wc2.1_10m_wind_05.tif\"\n \"/home/user/Data/WorldClim/Climate/wind/wc2.1_10m_wind_06.tif\"\n \"/home/user/Data/WorldClim/Climate/wind/wc2.1_10m_wind_07.tif\"\n \"/home/user/Data/WorldClim/Climate/wind/wc2.1_10m_wind_08.tif\"\n \"/home/user/Data/WorldClim/Climate/wind/wc2.1_10m_wind_09.tif\"\n \"/home/user/Data/WorldClim/Climate/wind/wc2.1_10m_wind_10.tif\"\n \"/home/user/Data/WorldClim/Climate/wind/wc2.1_10m_wind_11.tif\"\n \"/home/user/Data/WorldClim/Climate/wind/wc2.1_10m_wind_12.tif\"\n\nInstallation and setup\n\nInstall as usual with:\n\n] add RasterDataSources\n\nTo download data you will need to specify a folder to put it in. You can do this by assigning the environment variable RASTERDATASOURCES_PATH:\n\nENV[\"RASTERDATASOURCES_PATH\"] = \"/home/user/Data/\"\n\nThis can be put in your startup.jl file or the system environment.\n\nRasterDataSources was based on code from the SimpleSDMDataSoures.jl package by Timoth√©e Poisot.\n\n\n\n\n\n","category":"module"},{"location":"#getraster","page":"RasterDataSources.jl","title":"getraster","text":"","category":"section"},{"location":"","page":"RasterDataSources.jl","title":"RasterDataSources.jl","text":"RasterDataSources.jl only exports a single function, getraster.","category":"page"},{"location":"","page":"RasterDataSources.jl","title":"RasterDataSources.jl","text":"getraster","category":"page"},{"location":"#RasterDataSources.getraster","page":"RasterDataSources.jl","title":"RasterDataSources.getraster","text":"getraster(T::Type, layers::Union{Tuple,Int,Symbol}; kw...)\n\n\n\n\n\n","category":"function"},{"location":"","page":"RasterDataSources.jl","title":"RasterDataSources.jl","text":"Specific implementations are included with each source, below.","category":"page"},{"location":"#Data-sources","page":"RasterDataSources.jl","title":"Data sources","text":"","category":"section"},{"location":"","page":"RasterDataSources.jl","title":"RasterDataSources.jl","text":"RasterDataSources.RasterDataSource","category":"page"},{"location":"#RasterDataSources.RasterDataSource","page":"RasterDataSources.jl","title":"RasterDataSources.RasterDataSource","text":"RasterDataSource\n\nAbstract supertype for raster data collections.  \n\n\n\n\n\n","category":"type"},{"location":"#ALWB","page":"RasterDataSources.jl","title":"ALWB","text":"","category":"section"},{"location":"","page":"RasterDataSources.jl","title":"RasterDataSources.jl","text":"ALWB\ngetraster(T::Type{<:ALWB}, layers::Union{Tuple,Symbol}; date)","category":"page"},{"location":"#RasterDataSources.ALWB","page":"RasterDataSources.jl","title":"RasterDataSources.ALWB","text":"ALWB{Union{Deciles,Values},Union{Day,Month,Year}} <: RasterDataSource\n\nData from the Australian Landscape Water Balance (ALWB) data source.\n\nSee: www.bom.gov.au/water/landscape\n\nThe dataset contains NetCDF files. They have a time dimension so that multiple dates are stored in each file. \n\nThe available layers are: (:rain_day, :s0_pct, :ss_pct, :sd_pct, :sm_pct, :qtot, :etot, :e0, :ma_wet, :pen_pet, :fao_pet, :asce_pet, :msl_wet, :dd), available in daily, monthly and  annual resolutions, and as Values or relative Deciles.\n\ngetraster for ALWB must use a date keyword to specify the date to download.\n\nSee the getraster docs for implementation details.\n\n\n\n\n\n","category":"type"},{"location":"#RasterDataSources.getraster-Tuple{Type{<:ALWB}, Union{Symbol, Tuple}}","page":"RasterDataSources.jl","title":"RasterDataSources.getraster","text":"getraster(source::Type{<:ALWB{Union{Deciles,Values},Union{Day,Month,Year}}}, [layer]; date)\n\nDownload ALWB weather data from  www.bom.gov.au/water/landscape as values or  deciles with timesteps of Day, Month or Year.\n\nArguments\n\nlayer: Symbol or Tuple of Symbol from (:rain_day, :s0_pct, :ss_pct, :sd_pct, :sm_pct, :qtot, :etot, :e0, :ma_wet, :pen_pet, :fao_pet, :asce_pet, :msl_wet, :dd). Without a    layer argument, all layers will be downloaded, and a NamedTuple of paths returned.\n\nKeywords\n\ndate: a DateTime, AbstractVector of DateTime or a Tuple of start and end dates.   For multiple dates, a Vector of multiple filenames will be returned.   ALWB is available with a daily, monthly, and yearly, timestep.\n\nExample\n\nThis will return the file containing annual averages, including your date:\n\njulia> getraster(ALWB{Values,Year}, :ss_pct; date=Date(2001, 2))\n\"/your/RASTERDATASOURCES_PATH/ALWB/values/month/ss_pct.nc\"\n\nReturns the filepath/s of the downloaded or pre-existing files.\n\n\n\n\n\n","category":"method"},{"location":"#AWAP","page":"RasterDataSources.jl","title":"AWAP","text":"","category":"section"},{"location":"","page":"RasterDataSources.jl","title":"RasterDataSources.jl","text":"AWAP\ngetraster(T::Type{AWAP}, layer::Union{Tuple,Symbol}; date)","category":"page"},{"location":"#RasterDataSources.AWAP","page":"RasterDataSources.jl","title":"RasterDataSources.AWAP","text":"AWAP <: RasterDataSource\n\nDaily weather data from the Australian Water Availability Project, developed by CSIRO.\n\nSee: www.csiro.au/awap\n\nThe available layers are: (:solar, :rainfall, :vprpress09, :vprpress15, :tmin, :tmax).\n\n\n\n\n\n","category":"type"},{"location":"#RasterDataSources.getraster-Tuple{Type{AWAP}, Union{Symbol, Tuple}}","page":"RasterDataSources.jl","title":"RasterDataSources.getraster","text":"getraster(source::Type{AWAP}, [layer]; date)\n\nDownload data from the AWAP weather dataset, from www.csiro.au/awap. \n\nThe AWAP dataset contains ASCII .grid files.\n\nArguments\n\nlayer Symbol or Tuple of Symbol for layers in (:solar, :rainfall, :vprpress09, :vprpress15, :tmin, :tmax). Without a    layer argument, all layers will be downloaded, and a NamedTuple of paths returned.\n\nKeywords\n\ndate: a DateTime, AbstractVector of DateTime or a Tuple of start and end dates.   For multiple dates, A Vector of multiple filenames will be returned.   AWAP is available with a daily timestep.\n\nExample\n\nDownload rainfall for the first month of 2001:\n\njulia> getraster(AWAP, :rainfall; date=Date(2001, 1, 1):Day(1):Date(2001, 1, 31))\n\n31-element Vector{String}:\n \"/your/path/AWAP/rainfall/totals/20010101.grid\"\n \"/your/path/AWAP/rainfall/totals/20010102.grid\"\n ...\n \"/your/path/AWAP/rainfall/totals/20010131.grid\"\n\nReturns the filepath/s of the downloaded or pre-existing files.\n\n\n\n\n\n","category":"method"},{"location":"#CHELSA","page":"RasterDataSources.jl","title":"CHELSA","text":"","category":"section"},{"location":"","page":"RasterDataSources.jl","title":"RasterDataSources.jl","text":"CHELSA\ngetraster(T::Type{CHELSA{BioClim}}, layer::Union{Tuple,Int,Symbol})\ngetraster(T::Type{<:CHELSA{<:Future{Climate}}}, layers::Union{Tuple,Symbol}; date, month)","category":"page"},{"location":"#RasterDataSources.CHELSA","page":"RasterDataSources.jl","title":"RasterDataSources.CHELSA","text":"CHELSA{Union{BioClim,BioClimPlus,Climate,<:Future}} <: RasterDataSource\n\nData from CHELSA, currently implements the BioClim BioClimPlus, and Climate variables for current and future conditions. \n\nSee: chelsa-climate.org for the dataset, and the getraster docs for implementation details.\n\n\n\n\n\n","category":"type"},{"location":"#RasterDataSources.getraster-Tuple{Type{CHELSA{BioClim}}, Union{Int64, Symbol, Tuple}}","page":"RasterDataSources.jl","title":"RasterDataSources.getraster","text":"getraster(source::Type{CHELSA{BioClim}}, [layer]; version = 2, [patch]) => Union{Tuple,String}\n\nDownload CHELSA BioClim data from chelsa-climate.org.\n\nArguments\n\nlayer: Integer or tuple/range of Integer from (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19),    or Symbols form (:bio1, :bio2, :bio3, :bio4, :bio5, :bio6, :bio7, :bio8, :bio9, :bio10, :bio11, :bio12, :bio13, :bio14, :bio15, :bio16, :bio17, :bio18, :bio19). Without a layer argument, all layers   will be downloaded, and a NamedTuple of paths returned.\n\nKeyword arguments\n\nversion: Integer indicating the CHELSA version, currently either 1 or 2.\npatch: Integer indicating the CHELSA patch number. Defaults to the latest patch (V1.2 and V2.1)\n\nReturns the filepath/s of the downloaded or pre-existing files.\n\n\n\n\n\n","category":"method"},{"location":"#RasterDataSources.getraster-Tuple{Type{<:CHELSA{<:Future{Climate}}}, Union{Symbol, Tuple}}","page":"RasterDataSources.jl","title":"RasterDataSources.getraster","text":"getraster(T::Type{CHELSA{Future{Climate}}}, [layer]; date, month) => String\n\nDownload CHELSA Climate data, choosing layers from: (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19).\n\nSee the docs for Future for model choices.\n\nWithout a layer argument, all layers will be downloaded, and a NamedTuple of paths returned.\n\nKeywords\n\ndate: a Date or DateTime object, a Vector, or Tuple of start/end dates.   Note that CHELSA CMIP5 only has two datasets, for the periods 2041-2060 and   2061-2080. CMIP6 has datasets for the periods 2011-2040, 2041-2070, and 2071-2100.   Dates must fall within these ranges.\nmonth: the month of the year, from 1 to 12, or a array or range of months like 1:12.\n\nExample\n\nusing Dates, RasterDataSources\ngetraster(CHELSA{Future{Climate, CMIP6, GFDLESM4, SSP370}}, :prec; date = Date(2050), month = 1)\n\n\n\n\n\n","category":"method"},{"location":"#EarthEnv","page":"RasterDataSources.jl","title":"EarthEnv","text":"","category":"section"},{"location":"","page":"RasterDataSources.jl","title":"RasterDataSources.jl","text":"EarthEnv\ngetraster(T::Type{EarthEnv{HabitatHeterogeneity}}, layers::Union{Tuple,Symbol}; res)\ngetraster(T::Type{EarthEnv{LandCover}}, layers::Union{Tuple,Int,Symbol}; res)","category":"page"},{"location":"#RasterDataSources.EarthEnv","page":"RasterDataSources.jl","title":"RasterDataSources.EarthEnv","text":"EarthEnv{Union{HabitatHeterogeneity,LandCover}} <: RasterDataSource\n\nData from the EarthEnv including HabitatHeterogeneity and LandCover\n\nSee: www.earthenv.org\n\n\n\n\n\n","category":"type"},{"location":"#RasterDataSources.getraster-Tuple{Type{EarthEnv{HabitatHeterogeneity}}, Union{Symbol, Tuple}}","page":"RasterDataSources.jl","title":"RasterDataSources.getraster","text":"getraster(source::Type{EarthEnv{HabitatHeterogeneity}}, [layer]; res=\"25km\")\n\nDownload EarthEnv habitat heterogeneity data.\n\nArguments\n\nlayer: Symbol or Tuple of Symbol from (:cv, :evenness, :range, :shannon, :simpson, :std, :Contrast, :Correlation, :Dissimilarity, :Entropy, :Homogeneity, :Maximum, :Uniformity, :Variance).   Without a layer argument, all layers will be downloaded, and a NamedTuple of paths returned.\n\nKeywords\n\nres: String chosen from (\"1km\", \"5km\", \"25km\"), defaulting to \"25km\".\n\nReturns the filepath/s of the downloaded or pre-existing files.\n\n\n\n\n\n","category":"method"},{"location":"#RasterDataSources.getraster-Tuple{Type{EarthEnv{LandCover}}, Union{Int64, Symbol, Tuple}}","page":"RasterDataSources.jl","title":"RasterDataSources.getraster","text":"getraster(T::Type{EarthEnv{LandCover}}, [layer]; discover=false) => Union{Tuple,String}\n\nDownload EarthEnv landcover data.\n\nArguments\n\nlayer: Integer or tuple/range of Integer from (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12),   or Symbols from (:needleleaf_trees, :evergreen_broadleaf_trees, :deciduous_broadleaf_trees, :other_trees, :shrubs, :herbaceous, :cultivated_and_managed, :regularly_flooded, :urban_builtup, :snow_ice, :barren, :open_water). Without a layer argument,   all layers will be downloaded, and a NamedTuple of paths returned.\n\nKeywords\n\ndiscover::Bool: whether to download the dataset that integrates the DISCover model.\n\nReturns the filepath/s of the downloaded or pre-existing files.\n\n\n\n\n\n","category":"method"},{"location":"#WorldClim","page":"RasterDataSources.jl","title":"WorldClim","text":"","category":"section"},{"location":"","page":"RasterDataSources.jl","title":"RasterDataSources.jl","text":"WorldClim\ngetraster(T::Type{WorldClim{BioClim}}, layers::Union{Tuple,Int,Symbol}; res)\ngetraster(T::Type{WorldClim{Weather}}, layers::Union{Tuple,Symbol}; date)\ngetraster(T::Type{WorldClim{Climate}}, layers::Union{Tuple,Symbol}; month, res)\ngetraster(T::Type{WorldClim{Elevation}}, layers::Union{Tuple,Symbol}; month, res)","category":"page"},{"location":"#RasterDataSources.WorldClim","page":"RasterDataSources.jl","title":"RasterDataSources.WorldClim","text":"WorldClim{Union{BioClim,Climate,Weather}} <: RasterDataSource\n\nData from WorldClim datasets, either BioClim, Climate or  Weather.\n\nSee: www.worldclim.org\n\n\n\n\n\n","category":"type"},{"location":"#RasterDataSources.getraster-Tuple{Type{WorldClim{BioClim}}, Union{Int64, Symbol, Tuple}}","page":"RasterDataSources.jl","title":"RasterDataSources.getraster","text":"getraster(T::Type{WorldClim{BioClim}}, [layer::Union{Tuple,AbstractVector,Integer}]; res::String=\"10m\") => Union{Tuple,AbstractVector,String}\n\nDownload WorldClim BioClim data.\n\nArguments\n\nlayer: Integer or tuple/range of Integer from (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19).    or Symbols from (:bio1, :bio2, :bio3, :bio4, :bio5, :bio6, :bio7, :bio8, :bio9, :bio10, :bio11, :bio12, :bio13, :bio14, :bio15, :bio16, :bio17, :bio18, :bio19). Without a layer argument, all layers   will be downloaded, and a NamedTuple of paths returned.\n\nKeywords\n\nres: String chosen from (\"30s\", \"2.5m\", \"5m\", \"10m\"), \"10m\" by default.\n\nReturns the filepath/s of the downloaded or pre-existing files.\n\n\n\n\n\n","category":"method"},{"location":"#RasterDataSources.getraster-Tuple{Type{WorldClim{Weather}}, Union{Symbol, Tuple}}","page":"RasterDataSources.jl","title":"RasterDataSources.getraster","text":"getraster(T::Type{WorldClim{Weather}}, [layer::Union{Tuple,Symbol}]; date) => Union{String,Tuple{String},Vector{String}}\n\nDownload WorldClim Weather data, for layer/s in: (:tmin, :tmax, :prec). Without a layer argument, all layers will be downloaded, and a NamedTuple of paths returned. \n\nKeywords\n\ndate: a Date or DateTime object, a Vector of dates, or Tuple of start/end dates.   WorldClim Weather is available with a daily timestep. \n\nReturns the filepath/s of the downloaded or pre-existing files.\n\n\n\n\n\n","category":"method"},{"location":"#RasterDataSources.getraster-Tuple{Type{WorldClim{Climate}}, Union{Symbol, Tuple}}","page":"RasterDataSources.jl","title":"RasterDataSources.getraster","text":"getraster(T::Type{WorldClim{Climate}}, [layer::Union{Tuple,Symbol}]; month, res::String=\"10m\") => Vector{String}\n\nDownload WorldClim Climate data. \n\nArguments\n\nlayer Symbol or Tuple of Symbol from (:tmin, :tmax, :tavg, :prec, :srad, :wind, :vapr).    Without a layer argument, all layers will be downloaded, and a NamedTuple of paths returned.\n\nKeywords\n\nmonth: Integer or AbstractArray of Integer. Chosen from 1:12.\nres: String chosen from (\"30s\", \"2.5m\", \"5m\", \"10m\"), \"10m\" by default.\n\nReturns the filepath/s of the downloaded or pre-existing files.\n\n\n\n\n\n","category":"method"},{"location":"#RasterDataSources.getraster-Tuple{Type{WorldClim{Elevation}}, Union{Symbol, Tuple}}","page":"RasterDataSources.jl","title":"RasterDataSources.getraster","text":"getraster(T::Type{WorldClim{Elevation}}, [layer::Union{Tuple,Symbol}]; res::String=\"10m\") => Union{Tuple,AbstractVector,String}\n\nDownload WorldClim Elevation data.\n\nArguments\n\nlayer: Symbol or Tuple of Symbol from (:elev,).    Without a layer argument, all layers will be downloaded, and a NamedTuple of paths returned.\n\nKeywords\n\nres: String chosen from (\"30s\", \"2.5m\", \"5m\", \"10m\"), \"10m\" by default.\n\nReturns the filepath/s of the downloaded or pre-existing files.\n\n\n\n\n\n","category":"method"},{"location":"#MODIS","page":"RasterDataSources.jl","title":"MODIS","text":"","category":"section"},{"location":"","page":"RasterDataSources.jl","title":"RasterDataSources.jl","text":"MODIS\ngetraster(T::Type{<:ModisProduct})\nModisProduct\nRasterDataSources.layerkeys(T::Type{<:ModisProduct})","category":"page"},{"location":"#RasterDataSources.MODIS","page":"RasterDataSources.jl","title":"RasterDataSources.MODIS","text":"MODIS{ModisProduct} <: RasterDataSource\n\nMODIS/VIIRS Land Product Database. Vegetation indices, surface reflectance, and more land cover data. Data from ModisProducts datasets. \n\nSee: modis.ornl.gov\n\n\n\n\n\n","category":"type"},{"location":"#RasterDataSources.getraster-Tuple{Type{<:ModisProduct}}","page":"RasterDataSources.jl","title":"RasterDataSources.getraster","text":"getraster(T::Union{Type{<:ModisProduct}, Type{MODIS{X}}}, [layer::Union{Tuple,AbstractVector,Integer, Symbol}]; kwargs...) => Union{String, AbstractVector, NamedTuple}\n\nDownload MODIS data for a given ModisProduct as ASCII raster(s).\n\nArguments\n\nlayer: Integer or tuple/range of Integer or Symbols. Without a layer argument, all layers will be downloaded, and a NamedTuple of paths returned.\n\nAvailable layers for a given product can be looked up using RasterDataSources.layerkeys(T::Type{<:ModisProduct}).\n\nKeywords\n\nlat and lon: Coordinates in decimal degrees of the approximate center of the raster. The MODIS API will try to match its pixel grid system as close as possible to those coordinates.\nkm_ab and km_lr: Half-width and half-height of the raster in kilometers (kilometers above/below and left/right). Currently only Integer values are supported, up to 100.\ndate: String, Date, DateTime, AbstractVector of dates or Tuple of a start and end date for the request. Strings should be in format YYYY-MM-DD but can be in similar formats as long as they are comprehensible by Dates.Date. The available date interval for MODIS is 16 days, reset every first of January.\n\nExample\n\nDownload 250m NDVI in the western part of Britanny, France, from winter to late spring, 2002:\n\njulia> getraster(MOD13Q1, :NDVI; lat = 48.25, lon = -4, km_ab = 50, km_lr = 50, date = (Date(2002,1,1), Date(2002,6,1)))\n\n    10-element Vector{String}:\n    \"/your/path/MODIS/MOD13Q1/250m_16_days_NDVI/47.8313_-4.5899_2002-01-01.asc\"\n    ...\n    \"/your/path/MODIS/MOD13Q1/250m_16_days_NDVI/47.8313_-4.5899_2002-05-25.asc\"\n\nWill attempt to download several files, one for each date and layer combination, and returns the filepath/s of the downloaded or pre-existing files. Coordinates in the file names correspond to the lower-left corner of the raster.\n\n\n\n\n\n","category":"method"},{"location":"#RasterDataSources.ModisProduct","page":"RasterDataSources.jl","title":"RasterDataSources.ModisProduct","text":"ModisProduct <: RasterDataSet\n\nAbstract supertype for MODIS/VIIRS products. \n\nUsage\n\nSome commonly used products are MOD13Q1 (250m resolution MODIS vegetation indices) and VNP13A1 (500m resolution VIIRS vegetation indices). Refer to the MODIS documentation for detailed product information.\n\n\n\n\n\n","category":"type"},{"location":"#RasterDataSources.layerkeys-Tuple{Type{<:ModisProduct}}","page":"RasterDataSources.jl","title":"RasterDataSources.layerkeys","text":"layerkeys(T::Type{<:ModisProduct}) => Tuple\n\nTuple of Symbols corresponding to the available layers for a given product. May issue a request to MODIS server to get the layers list, or might just read this information if the correctly named file is available.\n\n\n\n\n\n","category":"method"},{"location":"#Datasets","page":"RasterDataSources.jl","title":"Datasets","text":"","category":"section"},{"location":"","page":"RasterDataSources.jl","title":"RasterDataSources.jl","text":"RasterDataSources.RasterDataSet\nBioClim\nClimate\nWeather\nElevation\nLandCover\nHabitatHeterogeneity\nFuture","category":"page"},{"location":"#RasterDataSources.RasterDataSet","page":"RasterDataSources.jl","title":"RasterDataSources.RasterDataSet","text":"RasterDataSet\n\nAbstract supertype for datasets that belong to a RasterDataSource.\n\n\n\n\n\n","category":"type"},{"location":"#RasterDataSources.BioClim","page":"RasterDataSources.jl","title":"RasterDataSources.BioClim","text":"BioClim <: RasterDataSet\n\nBioClim datasets. Usually containing layers from 1:19.  These can also be accessed with :bioX, e.g. :bio5.\n\nThey do not usually use month or date keywords, but may use date in past/future scenarios. \n\nCurrently implemented for WorldClim and CHELSA as WorldClim{BioClim}, CHELSA{BioClim} and CHELSA{Future{BioClim, args..}}.\n\nSee the getraster docs for implementation details.\n\n\n\n\n\n","category":"type"},{"location":"#RasterDataSources.Climate","page":"RasterDataSources.jl","title":"RasterDataSources.Climate","text":"Climate <: RasterDataSet\n\nClimate datasets. These are usually months of the year, not specific dates, and use a month keyword in getraster. They also use date in past/future scenarios.\n\nCurrently implemented for WorldClim and CHELSA as WorldClim{Climate}, CHELSA{Climate} and CHELSA{Future{Climate, args..}}.\n\nSee the getraster docs for implementation details.\n\n\n\n\n\n","category":"type"},{"location":"#RasterDataSources.Weather","page":"RasterDataSources.jl","title":"RasterDataSources.Weather","text":"Weather <: RasterDataSet\n\nWeather datasets. These are usually large time-series of specific dates, and use a date keyword in getraster.\n\nCurrently implemented for WorldClim and CHELSA as WorldClim{Weather}, and CHELSA{Weather}\n\nSee the getraster docs for implementation details.\n\n\n\n\n\n","category":"type"},{"location":"#RasterDataSources.Elevation","page":"RasterDataSources.jl","title":"RasterDataSources.Elevation","text":"Elevation <: RasterDataSet\n\nElevation datasets. \n\nCurrently implemented for WorldClim as WorldClim{Elevation}.\n\nSee the getraster docs for implementation details.\n\n\n\n\n\n","category":"type"},{"location":"#RasterDataSources.LandCover","page":"RasterDataSources.jl","title":"RasterDataSources.LandCover","text":"LandCover <: RasterDataSet\n\nLand-cover datasets.\n\nCurrently implemented for EarthEnv as EarchEnv{LandCover}.\n\nSee the getraster docs for implementation details.\n\n\n\n\n\n","category":"type"},{"location":"#RasterDataSources.HabitatHeterogeneity","page":"RasterDataSources.jl","title":"RasterDataSources.HabitatHeterogeneity","text":"HabitatHeterogeneity <: RasterDataSet\n\nHabitat heterogeneity datasets.\n\nCurrently implemented for EarchEnv as EarchEnv{HabitatHeterogeneity}.\n\nSee the getraster docs for implementation details.\n\n\n\n\n\n","category":"type"},{"location":"#RasterDataSources.Future","page":"RasterDataSources.jl","title":"RasterDataSources.Future","text":"Future{<:RasterDataSet,<:CMIPphase,<:ClimateModel,<:ClimateScenario}\n\nFuture climate datasets specified with a dataset, phase, model, and scenario.\n\nType Parameters\n\nRasterDataSet\n\nCurrently BioClim and Climate are implemented for the CHELSA data source.\n\nCMIPphase\n\nCan be either CMIP5 or CMIP6.\n\nClimateModel\n\nClimate models can be chosen from: \n\n`forCMIP5`;\n\n`forCMIP6`;\"\n\nClimateScenario\n\nCMIP5 Climate scenarios are all RepresentativeConcentrationPathway and can be chosen from: RCP26, RCP45, RCP60, RCP85\n\nCMIP6 Climate scenarios are all SharedSocioeconomicPathway and can be chosen from: SSP126, SSP245, SSP370, SSP585\n\nHowever, note that not all climate scenarios are available for all models.\n\nExample\n\nusing RasterDataSources\ndataset = Future{BioClim, CMIP5, BNUESM, RCP45}\n# output\nFuture{BioClim, CMIP5, BNUESM, RCP45}\n\nCurrently Future is only implented for CHELSA\n\ndatasource = CHELSA{Future{BioClim, CMIP5, BNUESM, RCP45}}\n\n\n\n\n\n","category":"type"},{"location":"#Models,-phases-and-scenarios-for-[Future](@ref)-data.","page":"RasterDataSources.jl","title":"Models, phases and scenarios for Future data.","text":"","category":"section"},{"location":"","page":"RasterDataSources.jl","title":"RasterDataSources.jl","text":"RasterDataSources.ClimateModel\nRasterDataSources.CMIPphase \nCMIP5\nCMIP6\nRasterDataSources.ClimateScenario \nRasterDataSources.RepresentativeConcentrationPathway\nRasterDataSources.SharedSocioeconomicPathway","category":"page"},{"location":"#RasterDataSources.ClimateModel","page":"RasterDataSources.jl","title":"RasterDataSources.ClimateModel","text":"ClimateModel\n\nAbstract supertype for climate models use in Future datasets.\n\n\n\n\n\n","category":"type"},{"location":"#RasterDataSources.CMIPphase","page":"RasterDataSources.jl","title":"RasterDataSources.CMIPphase","text":"CMIPphase\n\nAbstract supertype for phases of the CMIP, the Coupled Model Intercomparison Project.\n\nSubtypes are CMIP5 and CMIP6.\n\n\n\n\n\n","category":"type"},{"location":"#RasterDataSources.CMIP5","page":"RasterDataSources.jl","title":"RasterDataSources.CMIP5","text":"CMIP5 <: CMIPphase\n\nThe Coupled Model Intercomparison Project, Phase 5.\n\n\n\n\n\n","category":"type"},{"location":"#RasterDataSources.CMIP6","page":"RasterDataSources.jl","title":"RasterDataSources.CMIP6","text":"CMIP6 <: CMIPphase\n\nThe Coupled Model Intercomparison Project, Phase 6.\n\n\n\n\n\n","category":"type"},{"location":"#RasterDataSources.ClimateScenario","page":"RasterDataSources.jl","title":"RasterDataSources.ClimateScenario","text":"ClimateScenario\n\nAbstract supertype for scenarios used in CMIPphase models.\n\n\n\n\n\n","category":"type"},{"location":"#RasterDataSources.RepresentativeConcentrationPathway","page":"RasterDataSources.jl","title":"RasterDataSources.RepresentativeConcentrationPathway","text":"RepresentativeConcentrationPathway\n\nAbstract supertype for Representative Concentration Pathways (RCPs) for CMIP5.\n\nSubtypes are: RCP26, RCP45, RCP60, RCP85\n\n\n\n\n\n","category":"type"},{"location":"#RasterDataSources.SharedSocioeconomicPathway","page":"RasterDataSources.jl","title":"RasterDataSources.SharedSocioeconomicPathway","text":"SharedSocioeconomicPathway\n\nAbstract supertype for Shared Socio-economic Pathways (SSPs) for CMIP6.\n\nSubtypes are: SSP126, SSP245, SSP370, SSP585\n\n\n\n\n\n","category":"type"},{"location":"#Other","page":"RasterDataSources.jl","title":"Other","text":"","category":"section"},{"location":"","page":"RasterDataSources.jl","title":"RasterDataSources.jl","text":"Values\nDeciles","category":"page"},{"location":"#RasterDataSources.Values","page":"RasterDataSources.jl","title":"RasterDataSources.Values","text":"Values <: DataMode\n\nGet the dataset as regular measured values.\n\n\n\n\n\n","category":"type"},{"location":"#RasterDataSources.Deciles","page":"RasterDataSources.jl","title":"RasterDataSources.Deciles","text":"Deciles <: DataMode\n\nGet the dataset in relative deciles.\n\n\n\n\n\n","category":"type"},{"location":"#Internal-interface","page":"RasterDataSources.jl","title":"Internal interface","text":"","category":"section"},{"location":"","page":"RasterDataSources.jl","title":"RasterDataSources.jl","text":"These methods are not exported at this stage, but are for the most part internally consistent. Any new sources added to the package should use these methods in a consistent way for readability, consistency and the potential to use them for other things later.","category":"page"},{"location":"","page":"RasterDataSources.jl","title":"RasterDataSources.jl","text":"RasterDataSources.layerkeys\nRasterDataSources.rastername\nRasterDataSources.rasterpath\nRasterDataSources.rasterurl\nRasterDataSources.zipname\nRasterDataSources.zippath\nRasterDataSources.zipurl","category":"page"},{"location":"#RasterDataSources.layerkeys","page":"RasterDataSources.jl","title":"RasterDataSources.layerkeys","text":"layerkeys(T::Type{<:ModisProduct}) => Tuple\n\nTuple of Symbols corresponding to the available layers for a given product. May issue a request to MODIS server to get the layers list, or might just read this information if the correctly named file is available.\n\n\n\n\n\n","category":"function"},{"location":"#RasterDataSources.rastername","page":"RasterDataSources.jl","title":"RasterDataSources.rastername","text":"rastername(source::Type, [layer]; kw...)\n\nReturns the name of the file, without downloading it.\n\nArguments are the same as for getraster\n\nReturns a String or multiple Strings.\n\n\n\n\n\n","category":"function"},{"location":"#RasterDataSources.rasterpath","page":"RasterDataSources.jl","title":"RasterDataSources.rasterpath","text":"rasterpath(source::Type, [layer]; kw...)\n\nReturns the name of the file, without downloading it.\n\nArguments are the same as for getraster\n\nReturns a String or multiple Strings.\n\n\n\n\n\n","category":"function"},{"location":"#RasterDataSources.rasterurl","page":"RasterDataSources.jl","title":"RasterDataSources.rasterurl","text":"rasterurl(source::Type, [layer]; kw...)\n\nIf the file has a single url, returns it without downloading.\n\nArguments are the same as for getraster.\n\nReturns a URIs.jl URI or mulitiple URIs.\n\n\n\n\n\n","category":"function"},{"location":"#RasterDataSources.zipname","page":"RasterDataSources.jl","title":"RasterDataSources.zipname","text":"zipname(source::Type, [layer]; kw...)\n\nIf the url is a zipped file, returns its name.\n\nArguments are as the same for getraster where possible.\n\nReturns a String or multiple Strings.\n\n\n\n\n\n","category":"function"},{"location":"#RasterDataSources.zippath","page":"RasterDataSources.jl","title":"RasterDataSources.zippath","text":"zippath(source::Type, [layer]; kw...)\n\nIf the url is a zipped file, returns its path when downloaded. (This may not exist after extraction with getraster)\n\nArguments are the same as for getraster where possible.\n\nReturns a String or multiple Strings.\n\n\n\n\n\n","category":"function"},{"location":"#RasterDataSources.zipurl","page":"RasterDataSources.jl","title":"RasterDataSources.zipurl","text":"zipurl(source::Type, [layer]; kw...)\n\nIf the url is a zipped file, returns its zip path without downloading.\n\nArguments are the same as for getraster where possible.\n\nReturns a URIs.jl URI or mulitiple URIs.\n\n\n\n\n\n","category":"function"},{"location":"#Internal-MODIS-interface","page":"RasterDataSources.jl","title":"Internal MODIS interface","text":"","category":"section"},{"location":"","page":"RasterDataSources.jl","title":"RasterDataSources.jl","text":"Unlike all the other currently supported data sources, MODIS data is not available online in raster file format. Building rasters out of the available information therefore requires internal functions that are not exported. They might be extended as needed if other similar sources get supported.","category":"page"},{"location":"#Requesting-to-server-and-building-raster-files","page":"RasterDataSources.jl","title":"Requesting to server and building raster files","text":"","category":"section"},{"location":"","page":"RasterDataSources.jl","title":"RasterDataSources.jl","text":"RasterDataSources.modis_request\nRasterDataSources.process_subset","category":"page"},{"location":"#RasterDataSources.modis_request","page":"RasterDataSources.jl","title":"RasterDataSources.modis_request","text":"modis_request(T::Type{<:ModisProduct}, args...)\n\nLowest level function for requests to modis server. All arguments are assumed correct.\n\nArguments\n\nlayer: String matching the \"exact\" layer name (i.e. as it is written in the MODIS dataset itself) for the given product. e.g. \"250m_16_days_EVI\".\nlat, lon, km_ab, km_lr in correct types\nfrom, to: Strings of astronomical dates for start and end dates of downloaded data, e.g. \"A2002033\" for \"2002-02-02\"\n\nReturns a NamedTuple of information relevant to build a raster header, and a Vector of Dicts containing raster data, directly downloaded from MODIS. Those will almost always directly be passed to RasterDataSources.process_subset\n\n\n\n\n\n","category":"function"},{"location":"#RasterDataSources.process_subset","page":"RasterDataSources.jl","title":"RasterDataSources.process_subset","text":"process_subset(T::Type{<:ModisProduct}, subset::Vector{Any}, pars::NamedTuple)\n\nProcess a raw subset and argument parameters and create several raster files. Any already existing file is not overwritten.\n\nFor each band, a separate folder is created, containing a file for each of the required dates. This is inspired by the way WorldClim{Climate} treats the problem of possibly having to download several dates AND bands.\n\nCan theoretically be used for MODIS data that does not directly come from RasterDataSources.modis_request, but caution is advised.\n\nReturns the filepath/s of the created or pre-existing files.\n\n\n\n\n\n","category":"function"},{"location":"#Miscellaneous","page":"RasterDataSources.jl","title":"Miscellaneous","text":"","category":"section"},{"location":"","page":"RasterDataSources.jl","title":"RasterDataSources.jl","text":"RasterDataSources.product\nRasterDataSources.sinusoidal_to_latlon","category":"page"},{"location":"#RasterDataSources.product","page":"RasterDataSources.jl","title":"RasterDataSources.product","text":"product(T::Type{<:ModisProduct})\n\nExtracts ModisProduct product name as a String\n\n\n\n\n\n","category":"function"},{"location":"#RasterDataSources.sinusoidal_to_latlon","page":"RasterDataSources.jl","title":"RasterDataSources.sinusoidal_to_latlon","text":"sinusoidal_to_latlon(x::Real, y::Real)\n\nConvert x and y in sinusoidal projection to lat and lon in dec. degrees\n\nThe (Image: EPSG.io API) takes care of coordinate conversions. This is not ideal in terms of network use but guarantees that the coordinates are correct.\n\n\n\n\n\n","category":"function"}]
}
